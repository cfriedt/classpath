/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class gnu_java_nio_VMChannel */

#ifndef _Included_gnu_java_nio_VMChannel
#define _Included_gnu_java_nio_VMChannel
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     gnu_java_nio_VMChannel
 * Method:    stdin_fd
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_gnu_java_nio_VMChannel_stdin_1fd
  (JNIEnv *, jclass);

/*
 * Class:     gnu_java_nio_VMChannel
 * Method:    stdout_fd
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_gnu_java_nio_VMChannel_stdout_1fd
  (JNIEnv *, jclass);

/*
 * Class:     gnu_java_nio_VMChannel
 * Method:    stderr_fd
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_gnu_java_nio_VMChannel_stderr_1fd
  (JNIEnv *, jclass);

/*
 * Class:     gnu_java_nio_VMChannel
 * Method:    setBlocking
 * Signature: (IZ)V
 */
JNIEXPORT void JNICALL Java_gnu_java_nio_VMChannel_setBlocking
  (JNIEnv *, jclass, jint, jboolean);

/*
 * Class:     gnu_java_nio_VMChannel
 * Method:    available
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_gnu_java_nio_VMChannel_available
  (JNIEnv *, jclass, jint);

/*
 * Class:     gnu_java_nio_VMChannel
 * Method:    read
 * Signature: (ILjava/nio/ByteBuffer;)I
 */
JNIEXPORT jint JNICALL Java_gnu_java_nio_VMChannel_read__ILjava_nio_ByteBuffer_2
  (JNIEnv *, jclass, jint, jobject);

/*
 * Class:     gnu_java_nio_VMChannel
 * Method:    read
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_gnu_java_nio_VMChannel_read__I
  (JNIEnv *, jclass, jint);

/*
 * Class:     gnu_java_nio_VMChannel
 * Method:    readScattering
 * Signature: (I[Ljava/nio/ByteBuffer;II)J
 */
JNIEXPORT jlong JNICALL Java_gnu_java_nio_VMChannel_readScattering
  (JNIEnv *, jclass, jint, jobjectArray, jint, jint);

/*
 * Class:     gnu_java_nio_VMChannel
 * Method:    receive
 * Signature: (ILjava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)I
 */
JNIEXPORT jint JNICALL Java_gnu_java_nio_VMChannel_receive
  (JNIEnv *, jclass, jint, jobject, jobject);

/*
 * Class:     gnu_java_nio_VMChannel
 * Method:    write
 * Signature: (ILjava/nio/ByteBuffer;)I
 */
JNIEXPORT jint JNICALL Java_gnu_java_nio_VMChannel_write__ILjava_nio_ByteBuffer_2
  (JNIEnv *, jobject, jint, jobject);

/*
 * Class:     gnu_java_nio_VMChannel
 * Method:    writeGathering
 * Signature: (I[Ljava/nio/ByteBuffer;II)J
 */
JNIEXPORT jlong JNICALL Java_gnu_java_nio_VMChannel_writeGathering
  (JNIEnv *, jobject, jint, jobjectArray, jint, jint);

/*
 * Class:     gnu_java_nio_VMChannel
 * Method:    send
 * Signature: (ILjava/nio/ByteBuffer;[BI)I
 */
JNIEXPORT jint JNICALL Java_gnu_java_nio_VMChannel_send
  (JNIEnv *, jclass, jint, jobject, jbyteArray, jint);

/*
 * Class:     gnu_java_nio_VMChannel
 * Method:    send6
 * Signature: (ILjava/nio/ByteBuffer;[BI)I
 */
JNIEXPORT jint JNICALL Java_gnu_java_nio_VMChannel_send6
  (JNIEnv *, jclass, jint, jobject, jbyteArray, jint);

/*
 * Class:     gnu_java_nio_VMChannel
 * Method:    write
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_gnu_java_nio_VMChannel_write__II
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     gnu_java_nio_VMChannel
 * Method:    initIDs
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_gnu_java_nio_VMChannel_initIDs
  (JNIEnv *, jclass);

/*
 * Class:     gnu_java_nio_VMChannel
 * Method:    socket
 * Signature: (Z)I
 */
JNIEXPORT jint JNICALL Java_gnu_java_nio_VMChannel_socket
  (JNIEnv *, jclass, jboolean);

/*
 * Class:     gnu_java_nio_VMChannel
 * Method:    connect
 * Signature: (I[BII)Z
 */
JNIEXPORT jboolean JNICALL Java_gnu_java_nio_VMChannel_connect
  (JNIEnv *, jclass, jint, jbyteArray, jint, jint);

/*
 * Class:     gnu_java_nio_VMChannel
 * Method:    connect6
 * Signature: (I[BII)Z
 */
JNIEXPORT jboolean JNICALL Java_gnu_java_nio_VMChannel_connect6
  (JNIEnv *, jclass, jint, jbyteArray, jint, jint);

/*
 * Class:     gnu_java_nio_VMChannel
 * Method:    disconnect
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_gnu_java_nio_VMChannel_disconnect
  (JNIEnv *, jclass, jint);

/*
 * Class:     gnu_java_nio_VMChannel
 * Method:    getsockname
 * Signature: (ILjava/nio/ByteBuffer;)I
 */
JNIEXPORT jint JNICALL Java_gnu_java_nio_VMChannel_getsockname
  (JNIEnv *, jclass, jint, jobject);

/*
 * Class:     gnu_java_nio_VMChannel
 * Method:    getpeername
 * Signature: (ILjava/nio/ByteBuffer;)I
 */
JNIEXPORT jint JNICALL Java_gnu_java_nio_VMChannel_getpeername
  (JNIEnv *, jclass, jint, jobject);

/*
 * Class:     gnu_java_nio_VMChannel
 * Method:    accept
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_gnu_java_nio_VMChannel_accept
  (JNIEnv *, jclass, jint);

/*
 * Class:     gnu_java_nio_VMChannel
 * Method:    open
 * Signature: (Ljava/lang/String;I)I
 */
JNIEXPORT jint JNICALL Java_gnu_java_nio_VMChannel_open
  (JNIEnv *, jclass, jstring, jint);

/*
 * Class:     gnu_java_nio_VMChannel
 * Method:    position
 * Signature: (I)J
 */
JNIEXPORT jlong JNICALL Java_gnu_java_nio_VMChannel_position
  (JNIEnv *, jclass, jint);

/*
 * Class:     gnu_java_nio_VMChannel
 * Method:    seek
 * Signature: (IJ)V
 */
JNIEXPORT void JNICALL Java_gnu_java_nio_VMChannel_seek
  (JNIEnv *, jclass, jint, jlong);

/*
 * Class:     gnu_java_nio_VMChannel
 * Method:    truncate
 * Signature: (IJ)V
 */
JNIEXPORT void JNICALL Java_gnu_java_nio_VMChannel_truncate
  (JNIEnv *, jclass, jint, jlong);

/*
 * Class:     gnu_java_nio_VMChannel
 * Method:    lock
 * Signature: (IJJZZ)Z
 */
JNIEXPORT jboolean JNICALL Java_gnu_java_nio_VMChannel_lock
  (JNIEnv *, jclass, jint, jlong, jlong, jboolean, jboolean);

/*
 * Class:     gnu_java_nio_VMChannel
 * Method:    unlock
 * Signature: (IJJ)V
 */
JNIEXPORT void JNICALL Java_gnu_java_nio_VMChannel_unlock
  (JNIEnv *, jclass, jint, jlong, jlong);

/*
 * Class:     gnu_java_nio_VMChannel
 * Method:    size
 * Signature: (I)J
 */
JNIEXPORT jlong JNICALL Java_gnu_java_nio_VMChannel_size
  (JNIEnv *, jclass, jint);

/*
 * Class:     gnu_java_nio_VMChannel
 * Method:    map
 * Signature: (ICJI)Ljava/nio/MappedByteBuffer;
 */
JNIEXPORT jobject JNICALL Java_gnu_java_nio_VMChannel_map
  (JNIEnv *, jclass, jint, jchar, jlong, jint);

/*
 * Class:     gnu_java_nio_VMChannel
 * Method:    flush
 * Signature: (IZ)Z
 */
JNIEXPORT jboolean JNICALL Java_gnu_java_nio_VMChannel_flush
  (JNIEnv *, jclass, jint, jboolean);

/*
 * Class:     gnu_java_nio_VMChannel
 * Method:    close
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_gnu_java_nio_VMChannel_close
  (JNIEnv *, jclass, jint);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class gnu_java_nio_VMChannel_State */

#ifndef _Included_gnu_java_nio_VMChannel_State
#define _Included_gnu_java_nio_VMChannel_State
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#endif
/* Header for class gnu_java_nio_VMChannel_Kind */

#ifndef _Included_gnu_java_nio_VMChannel_Kind
#define _Included_gnu_java_nio_VMChannel_Kind
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#endif
